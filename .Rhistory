1L, 2L, 22L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L,
15L, 16L, 17L, 18L, 19L, 20L, 21L, 23L, 24L, 25L, 26L, 27L, 28L,
29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 40L, 38L, 39L, 41L
), estr = c(4L, 5L, 23L, 24L, 39L, 48L, 52L, 54L, 56L, 93L, 116L,
167L, 305L, 322L, 327L, 360L, 368L, 369L, 374L, 385L, 392L, 392L,
392L, 509L, 517L, 528L, 571L, 571L, 572L, 587L, 592L, 21L, 22L,
27L, 51L, 53L, 64L, 96L, 108L, 109L, 110L, 115L, 122L, 126L,
150L, 155L, 156L, 157L, 158L, 159L, 181L, 188L, 190L, 194L, 200L,
222L, 226L, 270L, 284L, 287L, 289L, 295L, 313L, 315L, 611L, 648L,
660L, 679L, 701L, 703L, 705L, 712L, 4L, 12L, 14L, 23L, 29L, 35L,
39L, 46L, 48L, 50L, 53L, 59L, 64L, 68L, 70L, 71L, 84L, 87L, 88L,
93L, 102L, 119L, 130L, 134L, 137L, 142L, 143L, 156L, 165L, 185L,
186L, 189L, 200L, 216L, 276L, 339L, 433L, 434L, 436L, 437L, 455L,
458L, 459L, 467L, 467L, 491L, 500L, 501L, 513L, 519L, 523L, 534L,
534L, 556L, 560L, 562L, 577L, 591L, 613L, 639L, 675L, 691L, 701L,
707L, 707L, 725L, 739L, 747L, 3L, 4L, 10L, 39L, 50L, 51L, 57L,
58L, 59L, 62L, 88L, 88L, 92L, 102L, 112L, 113L, 114L, 116L, 134L,
272L, 281L, 305L, 310L, 313L, 314L, 420L, 606L, 726L, 745L, 821L,
990L, 1053L, 1281L, 1343L, 1360L, 1477L, 29L, 33L, 63L, 69L,
71L, 74L, 75L, 76L, 78L, 80L, 86L, 89L, 95L, 98L, 144L, 173L,
175L, 184L, 199L, 202L, 210L, 216L, 218L, 235L, 243L, 255L, 271L,
286L, 290L, 296L, 329L, 329L, 329L, 329L, 99L, 101L, 104L, 121L,
23L, 136L, 140L, 153L, 196L, 76L, 92L, 100L, 110L, 117L, 121L,
124L, 125L, 131L, 132L, 133L, 141L, 148L, 152L, 154L, 157L, 161L,
163L, 166L, 230L, 242L, 19L, 45L, 47L, 48L, 50L, 52L, 53L, 54L,
55L, 58L, 60L, 66L, 71L, 73L, 73L, 78L, 84L, 125L, 384L), strname = c("Little Carp",
"Big Carp", "Cranberry", "Goulais", "Harmony", "Chippewa", "Batchawana",
"Carp", "Pancake", "Agawa", "Gargantua", "Michipicoten", "Pic",
"Little Pic", "Prairie", "Pays Plat", "Gravel", "Little Gravel",
"Cypress", "Jackfish", "Stillwater", "Nipigon", "Cash", "Black Sturgeon",
"Wolf", "Pearl", "Neebing", "McIntyre", "Kaministiquia", "Cloud",
"Pigeon", "Galloway", "Tahquamenon", "Betsy", "Little Two Hearted",
"Two Hearted", "Sucker", "Miners", "Furnace", "Five Mile", "AuTrain",
"Rock", "Laughing Whitefish", "Chocolay", "Carp (Marquette)",
"Harlow", "Little Garlic", "Big Garlic", "Iron", "Salmon Trout (Houghton)",
"Huron", "Ravine", "Silver", "Falls", "Sturgeon", "Trap Rock",
"Traverse", "Salmon Trout (Marquette)", "Misery", "East Sleeping",
"Firesteel", "Ontonagon", "Potato", "Cranberry", "Bad", "Red Cliff",
"Sand (Bayfield)", "Brule", "Poplar (Douglas)", "Middle", "Amnicon",
"Nemadji", "Brevort", "Hog Island", "Black (Mackinac)", "Millecoquins",
"Rock", "Hudson", "Swan", "Milakokia", "Bulldog", "Gulliver Lake",
"Marblehead", "Manistique", "Deadhorse", "Bursaw", "Parent",
"Poodle Pete", "Valentine", "Little Fishdam", "Fishdam", "Sturgeon",
"Ogontz", "Whitefish", "Rapid", "Tacoosh", "Days", "Portage",
"Ford", "Bark", "Cedar", "Bailey", "Beattie", "Menominee", "Peshtigo",
"Oconto", "Hibbards", "East Twin", "Carp Lake Outlet", "Big Stone",
"Big Sucker", "Wycamp Lake", "Horton", "Boyne", "Porter", "Jordan",
"Deer", "Elk Lake Outlet", "Mitchell", "Boardman", "Good Harbor",
"Platte", "Betsie", "Big Manistee", "Little Manistee", "Gurney",
"Lincoln", "Pere Marquette", "Pentwater", "White", "Muskegon",
"Grand", "Kalamazoo", "Black  (Van Buren)", "Rogers", "St. Joseph",
"Paw Paw", "Galien", "Trail", "Burns Ditch", "Root", "Garden",
"Echo", "Sucker", "Two Tree", "Richardson", "Watson", "Gordon",
"Browns", "Koshkawong", "Thessalon", "Bridgland (L. Thessalon)",
"Livingstone", "Mississagi", "Lauzon", "Spragge", "No Name (H114)",
"Serpent", "Spanish", "Silver", "Sand", "Mindemoya", "Timber Bay",
"Manitou", "Blue Jaye", "Chikanishing", "French", "Still", "Magnetewan",
"Naiscoot", "St. Marys", "Boyne", "Musquash", "Sturgeon", "Nottawasaga",
"Sauble", "Little Munuscong", "Munuscong", "Caribou", "Albany",
"Trout (Creek)", "Beavertail", "Prentiss", "McKay", "Ceville",
"Hessel", "Nunns", "Pine", "Carp", "Martineau", "Cheboygan",
"Elliot", "Greene", "Mulligan", "Black Mallard", "Ocqueoc", "Schmidt",
"Trout (River)", "Swan", "Devils", "Black", "Au Sable", "Tawas Lake Outlet",
"East Au Gres", "Au Gres", "Rifle", "Tittabawassee", "Shiawassee",
"Cass", "Big Salt", "Big Otter", "Clear", "Big", "Youngs", "Cattaraugus",
"Crooked", "Raccoon", "Conneaut", "Grand", "Bronte", "Credit",
"Humber", "Rouge", "Duffins", "Lynde", "Oshawa", "Farewell",
"Bowmanville", "Wilmot", "Graham", "Port Britain", "Cobourg",
"Covert", "Grafton", "Shelter Valley", "Colborne", "Salem", "Proctors",
"Mayhew", "Salmon (River)", "Black", "South Sandy", "Skinner",
"Lindsey", "Little Sandy", "Deer", "Salmon (River)", "Grindstone",
"Snake", "Little Salmon", "Catfish", "Oswego", "Ninemile", "Sterling",
"Sterling Valley", "Red", "Sodus", "Salmon (Creek)", "First"),
lat = c(46.5, 46.5, 46.7, 46.71, 46.85, 46.91, 46.91, 46.95,
46.96, 47.35, 47.58, 47.93, 48.68, 48.8, 48.78, 48.88, 48.91,
48.91, 48.93, 49, 48.95, 48.95, 48.95, 48.83, 48.81, 48.61,
48.38, 48.38, 48.39, 48.08, 48, 46.52, 46.55, 46.67, 46.71,
46.7, 46.67, 46.49, 46.44, 46.46, 46.43, 46.46, 46.52, 46.5,
46.51, 46.63, 46.67, 46.71, 46.81, 46.86, 46.91, 46.84, 46.82,
46.75, 47.03, 47.19, 47.18, 47.15, 46.99, 46.98, 46.93, 46.87,
46.85, 46.84, 46.63, 46.58, 46.93, 46.74, 46.69, 46.69, 46.69,
46.7, 45.95, 46.07, 46.09, 46.09, 46.08, 45.96, 45.98, 45.96,
45.95, 45.96, 45.96, 45.94, 45.86, 45.84, 45.79, 45.78, 45.83,
45.9, 45.89, 45.83, 45.86, 45.91, 45.91, 45.91, 45.89, 45.7,
45.67, 45.57, 45.4, 45.25, 45.22, 45.09, 44.97, 44.89, 44.98,
44.14, 45.74, 45.74, 45.73, 45.65, 45.28, 45.21, 45.22, 45.15,
45.15, 44.9, 44.74, 44.76, 44.94, 44.73, 44.62, 44.25, 44.25,
44.15, 43.98, 43.98, 43.78, 43.37, 43.22, 43.05, 42.67, 42.4,
42.25, 42.11, 42.11, 41.8, 41.72, 41.63, 46.53, 46.53, 46.5,
46.29, 46.2, 46.18, 46.15, 46.15, 46.15, 46, 46.09, 46.25,
46.24, 46.17, 46.18, 46.2, 46.2, 46.2, 46.18, 45.92, 45.86,
45.66, 45.63, 45.6, 45.58, 45.98, 46, 45.76, 45.76, 45.63,
46.32, 45.3, 44.96, 44.73, 44.53, 44.65, 46.21, 46.2, 45.96,
45.96, 45.97, 45.97, 45.98, 45.99, 45.99, 46, 46.03, 46.05,
46.02, 45.97, 45.66, 45.65, 45.64, 45.61, 45.53, 45.49, 45.49,
45.42, 45.4, 44.92, 44.81, 44.4, 44.25, 44.14, 44.02, 43.99,
43.64, 43.64, 43.64, 43.64, 42.65, 42.58, 42.6, 42.76, 42.57,
42, 41.99, 41.97, 41.76, 43.39, 43.54, 43.63, 43.79, 43.81,
43.84, 43.86, 43.86, 43.88, 43.89, 43.89, 43.93, 43.95, 43.96,
43.96, 43.96, 43.98, 44, 44.02, 44.1, 44.17, 43.99, 43.72,
43.66, 43.66, 43.63, 43.58, 43.57, 43.55, 43.53, 43.52, 43.51,
43.46, 43.4, 43.34, 43.34, 43.3, 43.21, 43.31, 43.26), long = c(-84.43,
-84.45, -84.43, -84.45, -84.36, -84.43, -84.53, -84.58, -84.66,
-84.63, -85, -84.84, -86.28, -86.38, -86.76, -87.55, -87.76,
-87.78, -87.86, -88.08, -88.23, -88.23, -88.23, -88.38, -88.5,
-88.63, -89.21, -89.21, -89.21, -89.44, -89.56, -85.05, -85.02,
-85.02, -85.37, -85.41, -85.94, -86.54, -86.7, -86.73, -86.83,
-86.91, -87.02, -87.35, -87.38, -87.46, -87.52, -87.56, -87.65,
-87.77, -88.03, -88.25, -88.28, -88.45, -88.48, -88.39, -88.23,
-88.77, -88.98, -89.06, -89.19, -89.32, -89.38, -89.41, -90.65,
-90.54, -90.93, -91.61, -91.79, -91.82, -91.85, -92.02, -84.93,
-85.28, -85.34, -85.48, -85.53, -85.71, -85.81, -85.89, -85.91,
-86.04, -86.11, -86.24, -86.33, -86.34, -86.41, -86.42, -86.53,
-86.56, -86.57, -86.66, -86.77, -86.94, -86.96, -86.97, -86.97,
-87.08, -87.13, -87.24, -87.35, -87.48, -87.51, -87.59, -87.65,
-87.82, -87.17, -87.56, -84.83, -84.9, -84.94, -85.02, -85.09,
-85.01, -85.07, -85.13, -85.13, -85.41, -85.55, -85.61, -85.88,
-86.15, -86.24, -86.34, -86.34, -86.39, -86.47, -86.47, -86.44,
-86.42, -86.34, -86.25, -86.21, -86.28, -86.35, -86.48, -86.48,
-86.74, -86.9, -87.17, -84.2, -84.15, -84.06, -83.95, -84.07,
-84.05, -83.89, -83.89, -83.88, -83.81, -83.49, -83.56, -83.48,
-83.06, -82.82, -82.67, -82.7, -82.61, -82.96, -82.83, -83.34,
-82.26, -82.21, -82.1, -82.1, -81.41, -80.95, -80.55, -80.61,
-80.56, -84.12, -80.04, -79.85, -79.73, -80, -81.28, -84.25,
-84.24, -83.97, -84.07, -84.1, -84.2, -84.23, -84.29, -84.36,
-84.41, -84.56, -84.65, -84.69, -84.71, -84.46, -84.41, -84.23,
-84.19, -84.13, -84.07, -83.92, -83.82, -83.73, -83.42, -83.29,
-83.31, -83.52, -83.56, -83.68, -83.82, -83.85, -83.85, -83.85,
-83.85, -80.81, -80.6, -80.45, -80.25, -79.13, -80.43, -80.48,
-80.54, -81.28, -79.7, -79.58, -79.47, -79.11, -79.03, -78.95,
-78.82, -78.8, -78.66, -78.59, -78.57, -78.36, -78.17, -78.1,
-78.05, -77.99, -77.9, -77.83, -77.71, -77.57, -77.25, -76.06,
-76.2, -76.17, -76.17, -76.16, -76.2, -76.2, -76.21, -76.22,
-76.25, -76.32, -76.51, -76.63, -76.69, -76.69, -76.79, -76.92,
-77.72, -76.99)), .Names = c("lake", "lscode", "country",
"strcode", "estr", "strname", "lat", "long"), row.names = c(35L,
70L, 105L, 140L, 175L, 210L, 245L, 280L, 315L, 350L, 385L, 420L,
455L, 490L, 525L, 560L, 595L, 630L, 665L, 700L, 735L, 770L, 805L,
840L, 875L, 910L, 945L, 980L, 1015L, 1050L, 1085L, 1120L, 1155L,
1190L, 1225L, 1260L, 1295L, 1330L, 1365L, 1400L, 1435L, 1470L,
1505L, 1540L, 1575L, 1610L, 1645L, 1680L, 1715L, 1750L, 1785L,
1820L, 1855L, 1890L, 1925L, 1960L, 1995L, 2030L, 2065L, 2100L,
2135L, 2170L, 2205L, 2240L, 2275L, 2310L, 2345L, 2380L, 2415L,
2450L, 2485L, 2520L, 2558L, 2596L, 2634L, 2672L, 2710L, 2748L,
2786L, 2824L, 2862L, 2900L, 2938L, 2976L, 3014L, 3052L, 3090L,
3128L, 3166L, 3204L, 3242L, 3280L, 3318L, 3356L, 3394L, 3432L,
3470L, 3508L, 3546L, 3584L, 3622L, 3660L, 3698L, 3736L, 3774L,
3812L, 3850L, 3888L, 3926L, 3964L, 4002L, 4040L, 4078L, 4116L,
4154L, 4192L, 4230L, 4268L, 4306L, 4344L, 4382L, 4420L, 4458L,
4496L, 4534L, 4572L, 4610L, 4648L, 4686L, 4724L, 4762L, 4800L,
4838L, 4876L, 4914L, 4952L, 4990L, 5028L, 5066L, 5104L, 5142L,
5180L, 5218L, 5256L, 5294L, 5332L, 5370L, 5408L, 5446L, 5484L,
5522L, 5560L, 5598L, 5636L, 5674L, 5712L, 5750L, 5788L, 5826L,
5864L, 5902L, 5940L, 5978L, 6016L, 6054L, 6092L, 6130L, 6168L,
6206L, 6244L, 6282L, 6320L, 6358L, 6396L, 6434L, 6472L, 6510L,
6548L, 6586L, 6624L, 6662L, 6700L, 6738L, 6776L, 6814L, 6852L,
6890L, 6928L, 6966L, 7004L, 7042L, 7080L, 7118L, 7156L, 7194L,
7232L, 7270L, 7308L, 7346L, 7384L, 7422L, 7460L, 7498L, 7536L,
7574L, 7612L, 7650L, 7688L, 7726L, 7764L, 7799L, 7834L, 7869L,
7904L, 7939L, 7974L, 8009L, 8044L, 8079L, 8116L, 8153L, 8190L,
8227L, 8264L, 8301L, 8338L, 8375L, 8412L, 8449L, 8486L, 8523L,
8560L, 8597L, 8634L, 8671L, 8708L, 8745L, 8782L, 8819L, 8856L,
8893L, 8930L, 8967L, 9004L, 9041L, 9078L, 9115L, 9152L, 9189L,
9226L, 9263L, 9300L, 9337L, 9374L, 9411L, 9448L, 9485L, 9522L,
9559L), class = "data.frame")
save(list=ls(all=FALSE), file="C:/Users/TTreska/OneDrive - Great Lakes Fishery Commission/Documents/GitHub/GLFC/data/misc.RData")
misc<-load("C:/Users/TTreska/OneDrive - Great Lakes Fishery Commission/Documents/GitHub/GLFC/data/misc.RData")
ls()
blindcolz
remotes::install_github("tjtreska/GLFC")
library(GLFC)
Lakenames=c("Superior", "Michigan", "Huron", "Erie", "Ontario")
# update files each year as needed
SRpresto(
#FOLDER="C:/JVA/GLFC/People/Siefkes/Status graphs/",
FOLDER="C:/Users/TTreska/OneDrive - Great Lakes Fishery Commission/Documents/Data Consolidation/Analysis/GLFC Lamprey Summary Files/Lakes Meeting 2024/",
# adult index data should be updated in September
INDEX.LAKE="AdultLakeThru2023.csv",
INDEX.STREAM="AdultStreamThru2023.csv",
# this file doesn't usually get updated
MAXLARVAE="MaxLarvalEstimatesSummary2013mod2016-08-25.xls",
# control data should be updated in March
# Lexi Sumner @ DFO last supplied it
CONTROL = "ControlTable.csv",
# marking data should be updated in March
# Ted Treska @ USFWS last supplied them
TROUTSUP = "TroutSuperior.csv",
TROUTMIC = "TroutMichigan.csv",
TROUTHUR = "TroutHuron.csv",
TROUTERI = "TroutErie.csv",
TROUTONT = "TroutOntario.csv",
# this file doesn't usually get updated
AXISRANGES = "AxisRanges.xls")
install.packages("r2rtf")
# Set working directory and files to be used in estimation with current year folder
#setwd("G:/Adult/Spawner Model Files/2023 Files")
setwd("C:/Users/TTreska/OneDrive - Great Lakes Fishery Commission/Documents/Data Consolidation/Analysis/GLFC Lamprey Summary Files/Lakes Meeting 2023")
## updateDir to current year file
#Dir <- "G:\\Adult\\Spawner Model Files\\2023 files"
#Dir <- "C:/Users/TTreska/OneDrive - Great Lakes Fishery Commission/Documents/Data Consolidation/Analysis/GLFC Lamprey Summary Files/Lakes Meeting 2023"
Dir <- "C:\\Users\\TTreska\\OneDrive - Great Lakes Fishery Commission\\Documents\\Data Consolidation\\Analysis\\GLFC Lamprey Summary Files\\Lakes Meeting 2023"
## updateStreamNew to current year file
StreamNew <- "AdultStream2023.csv"
## UpdateStreamPrev to previous year file
StreamPrev <- "AdultStreamThru2023.csv"
## UpdateLakePrev to previous year
LakePrev <- "AdultLakeThru2023.csv"
# (error checking and draft report documents will be generated)
AIpresto(DIRECTORY=Dir, NEWDATARAW=StreamNew, STREAMDATAPREV=StreamPrev,
LAKEDATAPREV=LakePrev)
library(GLFC)
# (error checking and draft report documents will be generated)
AIpresto(DIRECTORY=Dir, NEWDATARAW=StreamNew, STREAMDATAPREV=StreamPrev,
LAKEDATAPREV=LakePrev)
## updateStreamNew to current year file
StreamNew <- "AdultStream2023.csv"
## UpdateStreamPrev to previous year file
StreamPrev <- "AdultStreamThru2022.csv"
## UpdateLakePrev to previous year
LakePrev <- "AdultLakeThru2022.csv"
# (error checking and draft report documents will be generated)
AIpresto(DIRECTORY=Dir, NEWDATARAW=StreamNew, STREAMDATAPREV=StreamPrev,
LAKEDATAPREV=LakePrev)
AIreport <- function(streamPEs, lakeIPEs, targets, csvDir, outFile=NULL,
proptargets=NULL) {
# library(GLFC)
# library(maps)
# library(tidyr)
# library(dplyr)
# streamPEs=streamPE
# lakeIPEs=lakeIndPE
# targets=oldtarg
# csvDir=DIRECTORY
# outFile="TestReport"
# proptargets=NULL
YEAR <- max(streamPEs$year)
if (is.null(outFile)) {
outFile  <- paste(YEAR, "Adult Index - draft report.doc")
}
# calculate three-year running mean (moving average) for adult index
look <- tidyr::complete(lakeIPEs, lake, year) %>%
group_by(lake) %>%
arrange(lake, year) %>%
mutate(
lag1=lag(index, 1),
lag2=lag(index, 2),
nrun= (!is.na(index)) + (!is.na(lag1)) + (!is.na(lag2))
)
fullrun3 <- rowMeans(look[, c("index", "lag1", "lag2")], na.rm=TRUE)
look$index.3mn <- ifelse(look$nrun<2, NA, fullrun3)
lakeIPEs <- look
# Table 1: create nice looking table with latest year of estimates and targets
targ2 <- lakeIPEs %>%
filter(year==YEAR) %>%
full_join(targets) %>%
mutate(
Lake = Lakenames[lake],
Status = ifelse(index.3mn <= targInd, "Less than", "Greater than")
) %>%
ungroup() %>%
select(Lake, index, index.3mn, Target=targInd, Status)
TAB.targs <- prettytable(as.data.frame(targ2), 0)
# Figure 1: plot lake-wide totals w/ confidence intervals on different scales
FIG.lakeCI <- function(lakeids=1:5, k=index2pe) {
with(lakeIPEs, {
par(mfrow=c(3, 2), mar=c(3, 3, 2, 3), oma=c(2, 2, 0, 2), cex=1)
for(i in seq(lakeids)) {
j <- lakeids[i]
sel <- lake==j
mymax <- max(ihi[sel & year>=1985], na.rm=TRUE)/1000
plot(1, 1, type="n", xlim=range(year), ylim=c(0, mymax),
xlab="", ylab="", main=Lakenames[i], las=1)
abline(h=targets$targInd[j]/1000, lty=2)
if(!is.null(proptargets)) {
abline(h=proptargets$targInd[proptargets$lake==j]/1000,
col="darkgray", lwd=2, lty=2)
}
lines(year[sel], index.3mn[sel]/1000, col="#fb8072", lwd=2)
arrows(year[sel], ilo[sel]/1000, year[sel], ihi[sel]/1000, length=0.03,
angle=90, code=3, col="darkgray")
points(year[sel], index[sel]/1000)
p4 <- pretty(k[i]*c(0, mymax))
axis(4, at=p4/k[i], labels=p4, las=1)
if (i==1) {
frame()
}
}
mtext("Year", outer=TRUE, side=1, cex=1.4)
mtext("Adult index  (thousands)", outer=TRUE, side=2, cex=1.4)
mtext("Lake-wide adult abundance  (thousands)", outer=TRUE, side=4, cex=1.4)
})
}
streamPEs$categ <- "Non-index"
streamPEs$categ[with(streamPEs, index & !is.na(PEmr))] <-
"Index w/ mark-recap"
streamPEs$categ[with(streamPEs, index & is.na(PEmr))] <-
"Modeled - Index w/o mark-recap"
streamPEs$cle <- with(streamPEs,
paste(casefold(substring(country, 1, 2), upper=TRUE),
Lakeabbs[lake], estr, sep=" - "))
streamPEs$cleplus <- with(streamPEs, paste(
paste(cle, strname, sep="  "),
paste("    ", format(round(indexContrib), big.mark=",")), sep="\n"))
#     df=streamPEs[streamPEs$year==YEAR, ]
#     group="categ"
#     var="indexContrib"
#     lab="cleplus"
#     sug=c("Index w/ mark-recap", "Modeled - Index w/o mark-recap", "Non-index")
#     cols=blindcolz[1+(1:length(sug))]
#     legat="topright"
#     leginset=c(0, 0)
#     dr=range(sqrt(df[, var]), na.rm=TRUE)
#     cr=c(0.04, 0.5)
#     ox=-44
#     oy=64
FIG.bubble1 <- function(df, group, var, lab, sug,
cols=blindcolz[1:length(sug)], lonR=-c(92.14, 75.97),
latR=c(41.36, 49.02), legat="topright", leginset=c(0, 0),
dr=range(sqrt(df[, var]), na.rm=TRUE), cr=c(0.04, 0.25), ox=-44, oy=64) {
g <- df[, group]
v <- df[, var]
n <- length(g)
xr <- lonR
yr <- latR
xrw <- diff(xr)
yrw <- diff(yr)
bufx <- xrw/40
bufy <- yrw/40
magic <- 20
par(mar=c(0, 0, 0, 0))
maps::map("world", type="n", xlim=xr + c(-1, 1)*bufx,
ylim=yr + c(-magic, 1)*bufy, mar=c(0, 0, 0, 0))
maps::map("lakes", col="deepskyblue", add=TRUE, fill=TRUE)
pusr <- par("usr")
with(df, {
textx <- rep(NA, dim(df)[1])
textx <- seq(pusr[1], pusr[2],
length=n+2)[-c(1, n+2)][rank(long, ties.method="first")]
for(i in seq_along(sug)) {
sel <- g==sug[i]
if (sum(sel)>0) {
circles(long[sel], lat[sel], sqrt(v)[sel], data.range=dr,
circle.size.range=cr, outx=ox, outy=oy, add=TRUE, fg=cols[i], lwd=3)
text(textx[sel], yr[1] - (magic-1)*bufy, df[sel, lab],
adj=0, srt=90, col=cols[i], cex=0.8)
segments(textx[sel], yr[1] - 2*bufy, long[sel], lat[sel], col=cols[i],
lty=2)
}
}
})
par(xpd=NA)
legend(legat, sug, col=cols, lwd=3, bty="n", inset=leginset, cex=1.4)
}
FIG.bubble2 <- function() {
FIG.bubble1(
df=streamPEs[streamPEs$year==YEAR & streamPEs$categ!="Non-index", ],
group="categ", var="indexContrib", lab="cleplus",
sug=c("Index w/ mark-recap", "Modeled - Index w/o mark-recap"))
}
### Figure 2: bar plot of individual index stream PEs
outcex <- 1.2
YEARb <- 1995
col7 <- c("#8dd3c7", "#ffffb3", "#bebada", "#fb8072", "#80b1d3", "#fdb462",
"#b3de69")
FIG.bar <- function() {
par(mar=c(2.5, 2.5, 1, 1), mfrow=c(3, 2), yaxs="i", oma=c(1.5, 1.5, 0, 0),
cex=1.2)
for(i in 1:5) {
mystreamdf <- with(streamPEs,
streamPEs[lake==i & index==TRUE & year >= YEARb, ])
p <- with(mystreamdf,
tapply(indexContrib, list(year, substring(strname, 1, 10)), mean))
p <- p[, rev(order(apply(p, 2, median, na.rm=TRUE)))]
yrz <- as.numeric(dimnames(p)[[1]])
pyrz <- pretty(yrz)
a <- barplot(t(p)/1000, las=1, col=col7, axes=FALSE,
names.arg=rep("", dim(p)[1]),
ylim=1.03*c(0, max(apply(p, 1, sum, na.rm=TRUE)))/1000,
xlab="", ylab="", main=Lakenames[i], border=NA)
abline(h=targets$targInd[i]/1000)
if(!is.null(proptargets)) {
abline(h=proptargets$targInd[proptargets$lake==i]/1000, lty=2)
}
axis(1, at=a[match(pyrz, yrz)], pyrz)
axis(2, las=1)
box()
legend("topleft", rev(colnames(p)), fill=rev(col7[1:dim(p)[2]]), cex=0.5,
bty="n", border=NA)
if (i==1) {
frame()
}
}
mtext("Year", outer=TRUE, side=1, cex=outcex)
mtext("Adult Index  (thousands)", outer=TRUE, side=2, cex=outcex)
}
# create a file for the draft report
doc <<- startrtf(file=outFile, dir=csvDir)
heading("D R A F T")
heading(paste0(YEAR, " Lake-Wide Adult Sea Lamprey Index"))
para("Authors ...")
para(format(Sys.time(), "%B %d, %Y"))
para("<<<  This is a rough draft to be used as a starting point in creating the final report.  First, save the document as a *.docx Word file (even though it has a *.doc file extension already, it's really just an *.rtf file). Then, select all text in the document (Ctrl-a) and increase the font size to 12. Finally, delete this paragraph, add author names, edit text and insert/delete page breaks as needed.  >>>")
# merge this year and last years' estimates
both <- merge(lakeIPEs[lakeIPEs$year==YEAR-1, ],
lakeIPEs[lakeIPEs$year==YEAR, ],
by="lake", suffixes = c(".last",".this"), all=TRUE)
thyr <- round(both$index.this)
layr <- round(both$index.last)
hier <- with(both, ilo.this > ihi.last)
loer <- with(both, ihi.this < ilo.last)
phrase <- rep("not significantly different from", 5)
delta <- with(both, round(100*abs(index.this - index.last) / index.last))
phrase[is.na(hier)] <- "not comparable to"
phrase[!is.na(hier) & hier] <-
paste0(delta[!is.na(hier) & hier], "% higher than")
phrase[!is.na(hier) & loer] <-
paste0(delta[!is.na(hier) & loer], "% lower than")
abta <- sum(targ2$Status=="Greater than")
beta <- sum(targ2$Status=="Less than")
insert1 <- ""
insert2 <- ""
if (abta>0) {
insert1 <-
paste(targ2$Lake[targ2$Status=="Greater than"], collapse=", ")
}
if (beta>0) {
insert2 <-
paste(targ2$Lake[targ2$Status=="Less than"], collapse=", ")
}
para("The index of adult sea lamprey abundance is estimated annually for each Great Lake. Based on the mean over the last 3 years (", YEAR-2, "-", YEAR, "), lakes ", insert2, " were less than the targets and lakes ", insert1, " were greater than the targets (Table 1, Figure 1).  Index targets were determined for each lake as average abundance observed during a 5-year period when wounding rates were at an acceptable level. Adult sea lamprey indices and lake-wide abundances from 1985 to ", YEAR, " are reported in Tables 2 and 3.")
if(!is.null(proptargets)) {
ptl <- proptargets
ptl$targInd <- format(round(ptl$targInd), big.mark=",")
ptl <- split(ptl, ptl$lake)
pttext <- paste0(Lakenames[as.numeric(names(ptl))], ": ",
lapply(ptl, function(df) paste(df$targInd, collapse=", ")), collapse="; ")
para("In addition to the accepted targets, there are also the following proposed targets, ", pttext, ".  <<< Explain further. >>>")
}
insert1 <- ""
insert2 <- ""
insert3 <- ""
sel1 <- !is.na(hier) & loer
sel2 <- !is.na(hier) & !hier & !loer
sel3 <- !is.na(hier) & hier
if (sum(sel1)>0) {
insert1 <- paste(Lakenames[both$lake[sel1]], collapse=", ")
}
if (sum(sel2)>0) {
insert2 <- paste(Lakenames[both$lake[sel2]], collapse=", ")
}
if (sum(sel3)>0) {
insert3 <- paste(Lakenames[both$lake[sel3]], collapse=", ")
}
para("Comparing the 95% confidence intervals of the single year ", YEAR, " estimates with those in ", YEAR-1, ", the number of adults significantly decreased in lakes ", insert1, "; remained the same in lakes ", insert2, "; and significantly increased in lakes ", insert3, " (Figure 1).")
para("The contribution from individual streams to the adult index is shown in Figure 2.")
misspe <- sum(with(streamPEs, index==TRUE & year==YEAR &
(is.na(PEmr) | is.na(CVmr))))
allstr <- sum(with(streamPEs, index==TRUE & year==YEAR))
para("The distribution of the ", YEAR, " stream estimates around the Great Lakes is shown in Figure 3.  Mark-recapture estimates of adult sea lamprey abundance were available for ", allstr-misspe, " of the ", allstr, " index streams.")
prettyTAB.targs <- TAB.targs
names(prettyTAB.targs) <- c(
"Lake",
paste0(YEAR, "\nindex"),
paste0(YEAR-2, "-", YEAR, "\n mean index"),
"Target",
"Status")
tabl( "The Status of a lake is based on the mean adult index over the last 3 years relative to Target.",
TAB=prettyTAB.targs)
extraphrase <- ""
if(!is.null(proptargets)) {
extraphrase <- "  Dashed horizontal lines represent proposed targets."
}
#Figure 1 caption
figu("Adult index values for each Great Lake through ", YEAR, ", with 3-year averages shown as red lines.  Individual estimates with 95% confidence intervals are shown in gray.  Targets are represented by the dashed horizontal lines.", extraphrase,
FIG=FIG.lakeCI, newpage="port")#, w=6.5, h=7.5)
TAB.lakewide1 <- with(lakeIPEs, tapply(index, list(year, lake), mean))
colnames(TAB.lakewide1) <- Lakenames
#Table 2 caption
tabl("Adult Indices, 1985-", YEAR, ". NA indicates that a minimum of two successful mark-recapture estimates were not achieved.",
TAB=prettytable(TAB.lakewide1, 0))
TAB.lakewide2 <- with(lakeIPEs, tapply(pe, list(year, lake), mean))
colnames(TAB.lakewide2) <- Lakenames
#Table 3 caption
tabl("Lake-wide adult sea lamprey abundances, 1985-", YEAR, ", which are based on the adult index estimates multiplied by lake-specific conversion factors (", paste(names(index2pe), as.numeric(index2pe), collapse=", "), "). NA indicates that a minimum of two successful mark-recapture estimates were not achieved.",
TAB=prettytable(TAB.lakewide2, -3), newpage="port")
#Figure 2 caption
figu("Adult sea lamprey abundance estimates for index streams.  Targets are represented by the horizontal black lines. Streams may not always have an estimate in all years due to insufficient recaptures of marked sea lamprey.", extraphrase,
FIG=FIG.bar, newpage="port", w=6, h=7.5)
#Figure 3 caption
figu("Relative size of adult sea lamprey population estimates in Great Lakes index streams, ", YEAR, ".  Circle size represents size of population estimate, circle color represents the method of index calculation.",
FIG=FIG.bubble2, newpage="land", h=5.7)
endrtf()
#print figures for use outside of the report
}  #end AIreport function
n <- length(g)
# calculate three-year running mean (moving average) for adult index
look <- tidyr::complete(lakeIPEs, lake, year) %>%
group_by(lake) %>%
arrange(lake, year) %>%
mutate(
lag1=lag(index, 1),
lag2=lag(index, 2),
nrun= (!is.na(index)) + (!is.na(lag1)) + (!is.na(lag2))
)
look <- tidyr::complete(lakeIPEs, lake, year) %>%
group_by(lake) %>%
arrange(lake, year) %>%
mutate(
lag1=lag(index, 1),
lag2=lag(index, 2),
nrun= (!is.na(index)) + (!is.na(lag1)) + (!is.na(lag2))
)
